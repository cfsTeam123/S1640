//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace S1640.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class S1640Entities : DbContext
    {
        public S1640Entities()
            : base("name=S1640Entities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<BinMaster> BinMasters { get; set; }
        public virtual DbSet<Company> Companies { get; set; }
        public virtual DbSet<EMSMsg> EMSMsgs { get; set; }
        public virtual DbSet<InawardTable> InawardTables { get; set; }
        public virtual DbSet<LiveStockData> LiveStockDatas { get; set; }
        public virtual DbSet<Menulist> Menulists { get; set; }
        public virtual DbSet<TempTable> TempTables { get; set; }
        public virtual DbSet<Transaction> Transactions { get; set; }
        public virtual DbSet<UserAuthorization> UserAuthorizations { get; set; }
        public virtual DbSet<UserLogData> UserLogDatas { get; set; }
        public virtual DbSet<UserMaster> UserMasters { get; set; }
    
        public virtual int SP_Inward(ObjectParameter mTransNo, Nullable<System.DateTime> docDate, Nullable<System.DateTime> docDate2, string barCode, string binCondition, string binWash, string binFillStatus, Nullable<int> createdBy, Nullable<System.DateTime> createdOn, string status, Nullable<int> modifiedBy, Nullable<System.DateTime> modifiedOn, Nullable<int> docNO, string status1, string remarks2)
        {
            var docDateParameter = docDate.HasValue ?
                new ObjectParameter("DocDate", docDate) :
                new ObjectParameter("DocDate", typeof(System.DateTime));
    
            var docDate2Parameter = docDate2.HasValue ?
                new ObjectParameter("DocDate2", docDate2) :
                new ObjectParameter("DocDate2", typeof(System.DateTime));
    
            var barCodeParameter = barCode != null ?
                new ObjectParameter("BarCode", barCode) :
                new ObjectParameter("BarCode", typeof(string));
    
            var binConditionParameter = binCondition != null ?
                new ObjectParameter("BinCondition", binCondition) :
                new ObjectParameter("BinCondition", typeof(string));
    
            var binWashParameter = binWash != null ?
                new ObjectParameter("BinWash", binWash) :
                new ObjectParameter("BinWash", typeof(string));
    
            var binFillStatusParameter = binFillStatus != null ?
                new ObjectParameter("BinFillStatus", binFillStatus) :
                new ObjectParameter("BinFillStatus", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            var modifiedOnParameter = modifiedOn.HasValue ?
                new ObjectParameter("ModifiedOn", modifiedOn) :
                new ObjectParameter("ModifiedOn", typeof(System.DateTime));
    
            var docNOParameter = docNO.HasValue ?
                new ObjectParameter("DocNO", docNO) :
                new ObjectParameter("DocNO", typeof(int));
    
            var status1Parameter = status1 != null ?
                new ObjectParameter("Status1", status1) :
                new ObjectParameter("Status1", typeof(string));
    
            var remarks2Parameter = remarks2 != null ?
                new ObjectParameter("Remarks2", remarks2) :
                new ObjectParameter("Remarks2", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_Inward", mTransNo, docDateParameter, docDate2Parameter, barCodeParameter, binConditionParameter, binWashParameter, binFillStatusParameter, createdByParameter, createdOnParameter, statusParameter, modifiedByParameter, modifiedOnParameter, docNOParameter, status1Parameter, remarks2Parameter);
        }
    
        public virtual int SP_Livestock(Nullable<int> inwardNo, Nullable<System.DateTime> docDate, string binCode, string remarks, Nullable<int> userId, Nullable<int> createdby, Nullable<System.DateTime> createdOn, string status, string binStatus, string binCondition, string binFillStatus)
        {
            var inwardNoParameter = inwardNo.HasValue ?
                new ObjectParameter("InwardNo", inwardNo) :
                new ObjectParameter("InwardNo", typeof(int));
    
            var docDateParameter = docDate.HasValue ?
                new ObjectParameter("DocDate", docDate) :
                new ObjectParameter("DocDate", typeof(System.DateTime));
    
            var binCodeParameter = binCode != null ?
                new ObjectParameter("BinCode", binCode) :
                new ObjectParameter("BinCode", typeof(string));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var createdbyParameter = createdby.HasValue ?
                new ObjectParameter("Createdby", createdby) :
                new ObjectParameter("Createdby", typeof(int));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var binStatusParameter = binStatus != null ?
                new ObjectParameter("BinStatus", binStatus) :
                new ObjectParameter("BinStatus", typeof(string));
    
            var binConditionParameter = binCondition != null ?
                new ObjectParameter("BinCondition", binCondition) :
                new ObjectParameter("BinCondition", typeof(string));
    
            var binFillStatusParameter = binFillStatus != null ?
                new ObjectParameter("BinFillStatus", binFillStatus) :
                new ObjectParameter("BinFillStatus", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_Livestock", inwardNoParameter, docDateParameter, binCodeParameter, remarksParameter, userIdParameter, createdbyParameter, createdOnParameter, statusParameter, binStatusParameter, binConditionParameter, binFillStatusParameter);
        }
    
        public virtual int SP_TempTable(Nullable<int> inwardNo, Nullable<System.DateTime> docDate, string binCode, string remarks, Nullable<int> userId, Nullable<int> createdby, Nullable<System.DateTime> createdOn, string status, string binStatus, string binCondition, string binFillStatus)
        {
            var inwardNoParameter = inwardNo.HasValue ?
                new ObjectParameter("InwardNo", inwardNo) :
                new ObjectParameter("InwardNo", typeof(int));
    
            var docDateParameter = docDate.HasValue ?
                new ObjectParameter("DocDate", docDate) :
                new ObjectParameter("DocDate", typeof(System.DateTime));
    
            var binCodeParameter = binCode != null ?
                new ObjectParameter("BinCode", binCode) :
                new ObjectParameter("BinCode", typeof(string));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var createdbyParameter = createdby.HasValue ?
                new ObjectParameter("Createdby", createdby) :
                new ObjectParameter("Createdby", typeof(int));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var binStatusParameter = binStatus != null ?
                new ObjectParameter("BinStatus", binStatus) :
                new ObjectParameter("BinStatus", typeof(string));
    
            var binConditionParameter = binCondition != null ?
                new ObjectParameter("BinCondition", binCondition) :
                new ObjectParameter("BinCondition", typeof(string));
    
            var binFillStatusParameter = binFillStatus != null ?
                new ObjectParameter("BinFillStatus", binFillStatus) :
                new ObjectParameter("BinFillStatus", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_TempTable", inwardNoParameter, docDateParameter, binCodeParameter, remarksParameter, userIdParameter, createdbyParameter, createdOnParameter, statusParameter, binStatusParameter, binConditionParameter, binFillStatusParameter);
        }
    
        public virtual int SP_Transaction(Nullable<int> mTransNo, Nullable<int> inwardNo, Nullable<System.DateTime> docDate, string barCode, string binCondition, string binWash, string binFillStatus, Nullable<int> createdBy, Nullable<System.DateTime> createdOn, string status, Nullable<int> modifiedBy, Nullable<System.DateTime> modifiedOn, Nullable<int> docNO)
        {
            var mTransNoParameter = mTransNo.HasValue ?
                new ObjectParameter("MTransNo", mTransNo) :
                new ObjectParameter("MTransNo", typeof(int));
    
            var inwardNoParameter = inwardNo.HasValue ?
                new ObjectParameter("InwardNo", inwardNo) :
                new ObjectParameter("InwardNo", typeof(int));
    
            var docDateParameter = docDate.HasValue ?
                new ObjectParameter("DocDate", docDate) :
                new ObjectParameter("DocDate", typeof(System.DateTime));
    
            var barCodeParameter = barCode != null ?
                new ObjectParameter("BarCode", barCode) :
                new ObjectParameter("BarCode", typeof(string));
    
            var binConditionParameter = binCondition != null ?
                new ObjectParameter("BinCondition", binCondition) :
                new ObjectParameter("BinCondition", typeof(string));
    
            var binWashParameter = binWash != null ?
                new ObjectParameter("BinWash", binWash) :
                new ObjectParameter("BinWash", typeof(string));
    
            var binFillStatusParameter = binFillStatus != null ?
                new ObjectParameter("BinFillStatus", binFillStatus) :
                new ObjectParameter("BinFillStatus", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            var modifiedOnParameter = modifiedOn.HasValue ?
                new ObjectParameter("ModifiedOn", modifiedOn) :
                new ObjectParameter("ModifiedOn", typeof(System.DateTime));
    
            var docNOParameter = docNO.HasValue ?
                new ObjectParameter("DocNO", docNO) :
                new ObjectParameter("DocNO", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_Transaction", mTransNoParameter, inwardNoParameter, docDateParameter, barCodeParameter, binConditionParameter, binWashParameter, binFillStatusParameter, createdByParameter, createdOnParameter, statusParameter, modifiedByParameter, modifiedOnParameter, docNOParameter);
        }
    
        public virtual int SP_UserMaster(ObjectParameter iD, Nullable<int> mTransNo, Nullable<int> mCount, string userName, string address, string userId, string pW, string userType, string contactNo, string emailId, Nullable<byte> pWExpiry, Nullable<byte> badLogins, string lockStatus, Nullable<int> createdBy, Nullable<System.DateTime> createdOn, Nullable<int> subscID, string status)
        {
            var mTransNoParameter = mTransNo.HasValue ?
                new ObjectParameter("MTransNo", mTransNo) :
                new ObjectParameter("MTransNo", typeof(int));
    
            var mCountParameter = mCount.HasValue ?
                new ObjectParameter("MCount", mCount) :
                new ObjectParameter("MCount", typeof(int));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var userIdParameter = userId != null ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(string));
    
            var pWParameter = pW != null ?
                new ObjectParameter("PW", pW) :
                new ObjectParameter("PW", typeof(string));
    
            var userTypeParameter = userType != null ?
                new ObjectParameter("UserType", userType) :
                new ObjectParameter("UserType", typeof(string));
    
            var contactNoParameter = contactNo != null ?
                new ObjectParameter("ContactNo", contactNo) :
                new ObjectParameter("ContactNo", typeof(string));
    
            var emailIdParameter = emailId != null ?
                new ObjectParameter("EmailId", emailId) :
                new ObjectParameter("EmailId", typeof(string));
    
            var pWExpiryParameter = pWExpiry.HasValue ?
                new ObjectParameter("PWExpiry", pWExpiry) :
                new ObjectParameter("PWExpiry", typeof(byte));
    
            var badLoginsParameter = badLogins.HasValue ?
                new ObjectParameter("BadLogins", badLogins) :
                new ObjectParameter("BadLogins", typeof(byte));
    
            var lockStatusParameter = lockStatus != null ?
                new ObjectParameter("LockStatus", lockStatus) :
                new ObjectParameter("LockStatus", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var subscIDParameter = subscID.HasValue ?
                new ObjectParameter("SubscID", subscID) :
                new ObjectParameter("SubscID", typeof(int));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_UserMaster", iD, mTransNoParameter, mCountParameter, userNameParameter, addressParameter, userIdParameter, pWParameter, userTypeParameter, contactNoParameter, emailIdParameter, pWExpiryParameter, badLoginsParameter, lockStatusParameter, createdByParameter, createdOnParameter, subscIDParameter, statusParameter);
        }
    }
}
